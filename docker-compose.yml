services:
  myproject:
    build:
      context: .
    ports:
      - '8000:8000'
      - '8001:8001'
    volumes:
      - static:/usr/src/app/static
      - media:/usr/src/app/media
    env_file:
      - .env_dev
    depends_on:
      database:
        condition: service_healthy
      celery_worker:
        condition: service_started
      redis:
        condition: service_started
      celery_beats:
        condition: service_started
    restart: always

  database:
    image: postgres:16.1-alpine3.18
    volumes:
      - postgres-data:/var/lib/postgresql/data
    env_file:
      - .env_dev
    ports:
      - '5432:5432'
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  redis:
    image: redis:7.2.3-alpine3.18
    ports:
      - '6379:6379'
    restart: always

  celery_worker:
    build:
      context: .
    volumes:
      - media:/usr/src/app/media
    entrypoint: [ 'celery' ]
    command: [ '--workdir=/usr/src/app', '-A', 'config', 'worker', '-l', 'INFO' ]
    env_file:
      - .env_dev
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_started
    restart: always

  celery_beats:
    build:
      context: .
    entrypoint: ['sh', './entrypoint_celery_beats.sh']
    env_file:
      - .env_dev
    depends_on:
      database:
        condition: service_healthy
      celery_worker:
        condition: service_started
      redis:
        condition: service_started
    restart: always

  nginx:
    build: ./nginx
    volumes:
      - static:/static
      - media:/media
    ports:
      - "80:80"
    depends_on:
      - myproject

volumes:
  postgres-data:
  static:
  media: